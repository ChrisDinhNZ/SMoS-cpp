/**
 * SMoS - Library for encoding and decoding of SMoS messages.
 *        Please refer to https://github.com/ChrisDinhNZ/SMoS for more details.
 * Created by Chris Dinh, 2020
 * Released under MIT license
 * 
 * The library was derived from LibGIS IHex implementation (https://github.com/vsergeev/libGIS)
 */

#ifndef SMOS_DEFINITONS_H
#define SMOS_DEFINITONS_H

#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

typedef enum SMoSDefinitions_e
{
   /* Start Code */
   SMOS_START_CODE_HEX_STR_OFFSET = 0,
   SMOS_START_CODE_PDU_BYTE_INDEX = 0,
   SMOS_START_CODE_LSB_OFFSET = 0,
   SMOS_START_CODE_BIT_MASK = 0xFF,

   /* Byte Count */
   SMOS_BYTE_COUNT_HEX_STR_OFFSET = 1,
   SMOS_BYTE_COUNT_PDU_BYTE_INDEX = 1,
   SMOS_BYTE_COUNT_LSB_OFFSET = 0,
   SMOS_BYTE_COUNT_BIT_MASK = 0xFF,

   /* Version */
   SMOS_VERSION_HEX_STR_OFFSET = 3,
   SMOS_VERSION_PDU_BYTE_INDEX = 2,
   SMOS_VERSION_LSB_OFFSET = 6,
   SMOS_VERSION_BIT_MASK = 0xC0,

   /* Context type */
   SMOS_CONTEXT_TYPE_HEX_STR_OFFSET = 3,
   SMOS_CONTEXT_TYPE_PDU_BYTE_INDEX = 2,
   SMOS_CONTEXT_TYPE_LSB_OFFSET = 4,
   SMOS_CONTEXT_TYPE_BIT_MASK = 0x30,

   /* Last Block Flag */
   SMOS_LAST_BLOCK_FLAG_HEX_STR_OFFSET = 3,
   SMOS_LAST_BLOCK_FLAG_PDU_BYTE_INDEX = 2,
   SMOS_LAST_BLOCK_FLAG_LSB_OFFSET = 3,
   SMOS_LAST_BLOCK_FLAG_BIT_MASK = 0x08,

   /* Block Sequence Index */
   SMOS_BLOCK_SEQUENCE_INDEX_HEX_STR_OFFSET = 3,
   SMOS_BLOCK_SEQUENCE_INDEX_PDU_BYTE_INDEX = 2,
   SMOS_BLOCK_SEQUENCE_INDEX_LSB_OFFSET = 0,
   SMOS_BLOCK_SEQUENCE_INDEX_BIT_MASK = 0x07,

   /* Code Class */
   SMOS_CODE_CLASS_HEX_STR_OFFSET = 5,
   SMOS_CODE_CLASS_PDU_BYTE_INDEX = 3,
   SMOS_CODE_CLASS_LSB_OFFSET = 5,
   SMOS_CODE_CLASS_BIT_MASK = 0xE0,

   /* Code Detail */
   SMOS_CODE_DETAIL_HEX_STR_OFFSET = 5,
   SMOS_CODE_DETAIL_PDU_BYTE_INDEX = 3,
   SMOS_CODE_DETAIL_LSB_OFFSET = 0,
   SMOS_CODE_DETAIL_BIT_MASK = 0x1F,

   /* Message Id */
   SMOS_MESSAGE_ID_HEX_STR_OFFSET = 7,
   SMOS_MESSAGE_ID_PDU_BYTE_INDEX = 4,
   SMOS_MESSAGE_ID_LSB_OFFSET = 0,
   SMOS_MESSAGE_ID_BIT_MASK = 0xFF,

   /* Observe Flag */
   SMOS_OBSERVE_FLAG_HEX_STR_OFFSET = 9,
   SMOS_OBSERVE_FLAG_PDU_BYTE_INDEX = 5,
   SMOS_OBSERVE_FLAG_LSB_OFFSET = 7,
   SMOS_OBSERVE_FLAG_BIT_MASK = 0x80,

   /* Observe Notification Index */
   SMOS_OBSERVE_NOTIFICATION_INDEX_HEX_STR_OFFSET = 9,
   SMOS_OBSERVE_NOTIFICATION_INDEX_PDU_BYTE_INDEX = 5,
   SMOS_OBSERVE_NOTIFICATION_INDEX_LSB_OFFSET = 0,
   SMOS_OBSERVE_NOTIFICATION_INDEX_BIT_MASK = 0x7F,

   /* Resource Index */
   SMOS_RESOURCE_INDEX_HEX_STR_OFFSET = 11,
   SMOS_RESOURCE_INDEX_PDU_BYTE_INDEX = 6,
   SMOS_RESOURCE_INDEX_LSB_OFFSET = 0,
   SMOS_RESOURCE_INDEX_BIT_MASK = 0xFF,

   /* Data content */
   SMOS_PAYLOAD_HEX_STR_OFFSET = 13,
   SMOS_PAYLOAD_PDU_BYTE_INDEX = 7,
   SMOS_PAYLOAD_MAX_BYTE_COUNT = 255,

   /* ASCII char ':' */
   SMOS_START_CODE_VALUE = 0x3A,

   /* Current SMoS version ':' */
   SMOS_VERSION_CURRENT = 0x01,

   /* SMoS minimum Hex string length (i.e. when byte count is 0)
      Start Code = 1 char
      Header = 12 char
      Payload = 0 char
      Checksum = 2 char */
   SMOS_HEX_STRING_MIN_LENGTH = 15,

   /* SMoS maximum Hex string length (i.e. when byte count is 255)
      Start Code = 1 char
      Header = 12 char
      Payload = 510 char
      Checksum = 2 char */
   SMOS_HEX_STRING_MAX_LENGTH = 525,

   HEX_STR_LENGTH_PER_BYTE = 2
};

typedef enum SMoSContextType_e
{
   SMOS_CONTEXT_TYPE_CON = 0x00,
   SMOS_CONTEXT_TYPE_NON = 0x01,
   SMOS_CONTEXT_TYPE_ACK = 0x02,
   SMOS_CONTEXT_TYPE_RST = 0x03,
};

typedef enum SMoSCodeClass_e
{
   SMOS_CODE_CLASS_REQ = 0x00,
   SMOS_CODE_CLASS_RESP_SUCCESS = 0x02,
   SMOS_CODE_CLASS_RESP_CLIENT_ERROR = 0x04,
   SMOS_CODE_CLASS_RESP_SERVER_ERROR = 0x05,
};

typedef enum SMoSCodeDetailRequest_e
{
   SMOS_CODE_DETAIL_GET = 0x01,
   SMOS_CODE_DETAIL_OBSERVE = SMOS_CODE_DETAIL_GET,
   SMOS_CODE_DETAIL_POST = 0x02,
   SMOS_CODE_DETAIL_PUT = 0x03,
   SMOS_CODE_DETAIL_DELETE = 0x04,
};

typedef enum SMoSCodeDetailResponse_e
{
   SMOS_CODE_DETAIL_SUCCESS_CREATED = 0x01,
   SMOS_CODE_DETAIL_SUCCESS_DELETED = 0x02,
   SMOS_CODE_DETAIL_SUCCESS_VALID = 0x03,
   SMOS_CODE_DETAIL_SUCCESS_CHANGED = 0x04,
   SMOS_CODE_DETAIL_SUCCESS_CONTENT = 0x05,

   SMOS_CODE_DETAIL_CLIENT_ERROR_BAD_REQUEST = 0x00,
   SMOS_CODE_DETAIL_CLIENT_ERROR_UNAUTHORIZED = 0x01,
   SMOS_CODE_DETAIL_CLIENT_ERROR_BAD_OPTION = 0x02,
   SMOS_CODE_DETAIL_CLIENT_ERROR_FORBIDDEN = 0x03,
   SMOS_CODE_DETAIL_CLIENT_ERROR_NOT_FOUND = 0x04,
   SMOS_CODE_DETAIL_CLIENT_ERROR_METHOD_NOT_ALLOWED = 0x05,
   SMOS_CODE_DETAIL_CLIENT_ERROR_NOT_ACCEPTABLE = 0x06,
   SMOS_CODE_DETAIL_CLIENT_ERROR_PRECONDITION_FAILED = 0x0C,
   SMOS_CODE_DETAIL_CLIENT_ERROR_REQUEST_ENTITY_TOO_LARGE = 0x0D,
   SMOS_CODE_DETAIL_CLIENT_ERROR_UNSUPPORTED_CONTENT_FORMAT = 0x0F,

   SMOS_CODE_DETAIL_SERVER_ERROR_INTERNAL_SERVER_ERROR = 0x00,
   SMOS_CODE_DETAIL_SERVER_ERROR_NOT_IMPLEMENTED = 0x01,
   SMOS_CODE_DETAIL_SERVER_ERROR_BAD_GATEWAY = 0x02,
   SMOS_CODE_DETAIL_SERVER_ERROR_SERVICE_UNAVAILABLE = 0x03,
   SMOS_CODE_DETAIL_SERVER_ERROR_GATEWAY_TIMEOUT = 0x04,
   SMOS_CODE_DETAIL_SERVER_ERROR_PROXYING_NOT_SUPPORTED = 0x05
};

typedef enum SMoSResult_e
{
   SMOS_RESULT_UNKNOWN,
   SMOS_RESULT_SUCCESS,
   SMOS_RESULT_ERROR_EXCEED_MAX_DATA_SIZE,
   SMOS_RESULT_ERROR_NULL_POINTER,
   SMOS_RESULT_ERROR_ENCODE_MESSAGE,
   SMOS_RESULT_ERROR_NOT_MIN_LENGTH_HEX_STRING,
   SMOS_RESULT_ERROR_HEX_STRING_INCOMPLETE,
   SMOS_RESULT_ERROR_HEX_STRING_INVALID_STARTCODE,
   SMOS_RESULT_ERROR_HEX_STRING_INVALID_CHECKSUM
};

typedef enum SMoSPduFields_e
{
   SMOS_PDU_FIELD_IDENTIFIER_BYTE_COUNT,
   SMOS_PDU_FIELD_IDENTIFIER_VERSION,
   SMOS_PDU_FIELD_IDENTIFIER_CONTEXT_TYPE,
   SMOS_PDU_FIELD_IDENTIFIER_LAST_BLOCK_FLAG,
   SMOS_PDU_FIELD_IDENTIFIER_BLOCK_SEQUENCE_INDEX,
   SMOS_PDU_FIELD_IDENTIFIER_CODE_CLASS,
   SMOS_PDU_FIELD_IDENTIFIER_CODE_DETAIL,
   SMOS_PDU_FIELD_IDENTIFIER_MESSAGE_ID,
   SMOS_PDU_FIELD_IDENTIFIER_OBSERVE_FLAG,
   SMOS_PDU_FIELD_IDENTIFIER_OBSERVE_NOTIFICATION_INDEX,
   SMOS_PDU_FIELD_IDENTIFIER_RESOURCE_INDEX,
   SMOS_PDU_FIELD_IDENTIFIER_PAYLOAD
};

/**
 * Structure to hold the fields of an SMoS message.
 */
typedef struct SMoSObject_t
{
   uint8_t byteCount;
   uint8_t version;
   SMoSContextType_e contextType;
   bool lastBlockFlag;
   uint8_t blockSequenceIndex;
   SMoSCodeClass_e codeClass;
   SMoSCodeDetailRequest_e codeDetailRequest;
   SMoSCodeDetailResponse_e codeDetailResponse;
   uint8_t messageId;
   bool observeFlag;
   uint8_t observeNotificationIndex;
   uint8_t resourceIndex;
   uint8_t payload[SMOS_PAYLOAD_MAX_BYTE_COUNT];
};

#endif /* #define SMOS_DEFINITONS_H */
